{"ast":null,"code":"var _jsxFileName = \"/home/mahmudul/fullstack/myapp/src/App.js\";\nimport './App.css';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      articles: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:8000/api/articles/\").then(res => res.json()).then(data => {\n      this.setState({\n        isLoaded: true,\n        articles: data\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      articles\n    } = this.state;\n\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 14\n      }, this);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: blue\n        },\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: articles.map(article => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [article.title, \" \", article.description, \" \", article.author]\n          }, article.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mahmudul/fullstack/myapp/src/App.js"],"names":["React","App","Component","state","error","isLoaded","articles","componentDidMount","fetch","then","res","json","data","setState","render","message","color","blue","map","article","title","description","author","id"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACNC,MAAAA,KAAK,EAAE,IADD;AAENC,MAAAA,QAAQ,EAAE,KAFJ;AAGNC,MAAAA,QAAQ,EAAE;AAHJ,KADwB;AAAA;;AAMhCC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAC,qCAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,IAAD,IAAU;AACR,WAAKC,QAAL,CAAc;AACZR,QAAAA,QAAQ,EAAE,IADE;AAEZC,QAAAA,QAAQ,EAAEM;AAFE,OAAd;AAID,KARL,EASI;AACA;AACA;AACCR,IAAAA,KAAD,IAAW;AACT,WAAKS,QAAL,CAAc;AACZR,QAAAA,QAAQ,EAAE,IADE;AAEZD,QAAAA;AAFY,OAAd;AAID,KAjBL;AAmBD;;AAEDU,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEV,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB,QAAgC,KAAKH,KAA3C;;AAEA,QAAIC,KAAJ,EAAW;AACT,0BAAO;AAAA,8BAAaA,KAAK,CAACW,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO,IAAI,CAACV,QAAL,EAAe;AACpB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFM,MAEA;AACL,0BACE;AAAK,QAAA,KAAK,EAAE;AAACW,UAAAA,KAAK,EAACC;AAAP,SAAZ;AAAA,+BACE;AAAA,oBACGX,QAAQ,CAACY,GAAT,CAAaC,OAAO,iBACnB;AAAA,uBACGA,OAAO,CAACC,KADX,OACmBD,OAAO,CAACE,WAD3B,OACyCF,OAAO,CAACG,MADjD;AAAA,aAASH,OAAO,CAACI,EAAjB;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAWD;AACF;;AAhD+B;;AAmDlC,eAAetB,GAAf","sourcesContent":["import './App.css';\nimport React from 'react';\n\nclass App extends React.Component {\n  state = {\n    error: null,\n    isLoaded: false,\n    articles: []\n  };\n  componentDidMount() {\n    fetch(\"http://localhost:8000/api/articles/\")\n      .then(res => res.json())\n      .then(\n        (data) => {\n          this.setState({\n            isLoaded: true,\n            articles: data\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, articles } = this.state;\n    \n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div style={{color:blue}}>\n          <ul>\n            {articles.map(article => (\n              <li key={article.id}>\n                {article.title} {article.description} {article.author}\n              </li>\n            ))}\n          </ul>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}