{"ast":null,"code":"var _jsxFileName = \"/home/mahmudul/fullstack/myapp/src/App.js\";\nimport './App.css';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      articles: []\n    };\n  }\n\n  componentDidMount() {\n    /*\n    fetch(\"http://localhost:8000/api/articles/\")\n    .then(response => response.json())\n    .then(data=> {\n        this.setState({articles: data.articles});\n    }); */\n    fetch(\"http://localhost:8000/api/articles/\").then(res => res.json()).then(articles => {\n      return articles;\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      articles\n    } = this.state;\n\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 14\n      }, this);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: articles && articles.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [item.title, \" \", item.description]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mahmudul/fullstack/myapp/src/App.js"],"names":["React","App","Component","constructor","props","state","error","isLoaded","articles","componentDidMount","fetch","then","res","json","setState","render","message","map","item","title","description","id"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;AAEhCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI;AAEXC,MAAAA,QAAQ,EAAE,KAFC;AAGXC,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB;AACJ;AACA;AACA;AACA;AACA;AACIC,IAAAA,KAAK,CAAC,qCAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKH,QAAD,IAAc;AACZ,aAAOA,QAAP;AACD,KALL,EAMI;AACA;AACA;AACCF,IAAAA,KAAD,IAAW;AACT,WAAKQ,QAAL,CAAc;AACZP,QAAAA,QAAQ,EAAE,IADE;AAEZD,QAAAA;AAFY,OAAd;AAID,KAdL;AAgBD;;AACDS,EAAAA,MAAM,GAAG;AACP,UAAM;AAAET,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB,QAAgC,KAAKH,KAA3C;;AACA,QAAIC,KAAJ,EAAW;AACT,0BAAO;AAAA,8BAAaA,KAAK,CAACU,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO,IAAI,CAACT,QAAL,EAAe;AACpB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFM,MAEA;AACL,0BACE;AAAA,kBACGC,QAAQ,IAAIA,QAAQ,CAACS,GAAT,CAAaC,IAAI,iBAC5B;AAAA,qBACGA,IAAI,CAACC,KADR,OACgBD,IAAI,CAACE,WADrB;AAAA,WAASF,IAAI,CAACG,EAAd;AAAA;AAAA;AAAA;AAAA,gBADW;AADf;AAAA;AAAA;AAAA;AAAA,cADF;AASD;AACF;;AApD+B;;AAwDlC,eAAepB,GAAf","sourcesContent":["import './App.css';\nimport React from 'react';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      articles: []\n    };\n  }\n\n  componentDidMount() {\n    /*\n    fetch(\"http://localhost:8000/api/articles/\")\n    .then(response => response.json())\n    .then(data=> {\n        this.setState({articles: data.articles});\n    }); */\n    fetch(\"http://localhost:8000/api/articles/\")\n      .then(res => res.json())\n      .then(\n        (articles) => {\n          return articles;\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n  render() {\n    const { error, isLoaded, articles } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <ul>\n          {articles && articles.map(item => (\n            <li key={item.id}>\n              {item.title} {item.description}\n            </li>\n          ))}\n        </ul>\n      );\n    }\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}